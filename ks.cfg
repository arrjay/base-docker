#version=RHEL7
# System authorization information
auth --enableshadow --passalgo=sha512

# we're pretending to be a CDROM, even if we're...kinda not
cdrom

# Use text mode
text
# Dont' run the Setup Agent on first boot
firstboot --disable
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# partitioning is done via %pre madness
%include /tmp/part-include

# configure root password
rootpw --iscrypted $6$ddmoPYtWupIPA/Vn$9EcJ170zv2lnVP6mLK0W9zAWaf7OYmu3yHk9dY0/pl5dPluvkTp/wTLmT4C7BAIE4FAGxPQ0K0zPwftvdvl5/0

# networking is also in %pre (well, unless it's in %post)
%include /tmp/net-include

# reboot when done
%include /tmp/reboot-flag

# System timezone
timezone America/Los_Angeles --isUtc --nontp

# System services
services --enabled="lldpad,chronyd"

%packages
@core
@base

@virtualization-hypervisor
@virtualization-tools
virt-install

grub2
grub2-efi
grub2-efi-modules
shim
efibootmgr

%include /tmp/package-include

systemd-networkd

lldpad
epel-release
nut

dstat
htop
tmux
xorg-x11-xauth

policycoreutils-python

# needed for org_fedora_oscap addon
openscap
openscap-scanner
scap-security-guide

%end

%addon org_fedora_oscap
    content-type = scap-security-guide
    profile = common
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%pre
# be a chatterbox here
set -x

# on with nullglub
shopt -s nullglob

# functions
partition_all_drives() {
  # partition drives
  for d in /dev/[sv]d*[^0-9] ; do
    if [ "${d}" == "${repodisk}" ] ; then continue ; fi
    parted "${d}" mklabel gpt
    parted "${d}" mkpart biosboot 1m 5m
    parted "${d}" toggle 1 bios_grub
    parted "${d}" toggle 1 legacy_boot
    biosboot_dev="${biosboot_dev} ${d}1"

    parted "${d}" mkpart '"EFI System Partition"' 5m 300m
    parted "${d}" toggle 2 boot
    efi_sp_dev="${efi_sp_dev} ${d}2"

    parted "${d}" mkpart boot 300m 800m
    parted "${d}" toggle 3 raid
    boot_dev="${boot_dev} ${d}3"

    parted "${d}" mkpart primart 800m 100%
    parted "${d}" toggle 4 raid
    sys_dev="${sys_dev} ${d}4"
  done

}

# parts that can be _reset_ by system config but have a default
reboot_flag="reboot"
inst_fqdn="localhost.localdomain"

# first get if we have a syscfg on cmdline
read cmdline < /proc/cmdline
for ent in $cmdline ; do
  case $ent in
    syscfg=*)
      syscfg=${ent#syscfg=}
      ;;
  esac
done

# get whatever diskdev we're running on
repodisk=$(awk '$2 == "/run/install/repo" { print $1 }' < /proc/mounts)
repodisk=${repodisk%[1-9]*}

# well... let's try to find one
if [ -z "${syscfg}" ] ; then
  # first, chassis serial number?
  if [ -f /sys/class/dmi/id/chassis_serial ] ; then
    read cha_ser < /sys/class/dmi/id/chassis_serial
    case $cha_ser in
      C07M30ANDY3H)
        syscfg=nickel
        inst_fqdn="nickel.produxi.net"
        ;;
      "To Be Filled By O.E.M."|"#GIADAI##661##")
      # yuck, go grab ethernet MACs by PCI topology
      for macfile in /sys/devices/pci*/*/net/*/address /sys/devices/pci*/*/*/net/*/address ; do
        read mac < "${macfile}"
        case $mac in
          "00:1b:21:8f:8e:80")
            syscfg=rhenium
            inst_fqdn="rhenium.bbxn.us"
            break
            ;;
          "00:e0:6f:25:6e:8d")
            syscfg=mercury
            inst_fqdn="mercury.bbxn.us"
            break
            ;;
          "00:e0:6f:11:ac:20")
            syscfg=radon
            inst_fqdn="radon.bbxn.us"
            break
            ;;
        esac
      done
      ;;
    esac
  fi
fi

# second pass - more generic things
if [ -z "${syscfg}" ] ; then
  if [ -f /sys/class/dmi/id/chassis_vendor ] ; then
    read cha_ven < /sys/class/dmi/id/chassis_vendor
    case $cha_ven in
      "QEMU")
        syscfg=qemu-generic
        ;;
    esac
  fi
fi

# always stop lvm
vgchange -an

# always stop md devices
for md in /dev/md[0-9]* ; do
  mdadm -S "${md}"
done

# always erase disks, write a new gpt
for d in /dev/[sv]d*[^0-9] ; do
  # skip where we booted
  if [ "${d}" == "${repodisk}" ] ; then continue ; fi

  # partitions...
  for part in ${d}[0-9]* ; do
    wipefs -a "${part}"
  done

  # label
  wipefs -a "${d}"
done

# this holds any needed conditional package statements
touch /tmp/package-include

# disk setup globals
biosboot_dev=''
efi_sp_dev=''
boot_dev=''
sys_dev=''

if [[ " radon mercury nickel " =~ " ${syscfg} " ]] ; then
  reboot_flag="reboot"
fi

if [[ " rhenium qemu-generic " =~ " ${syscfg} " ]] ; then
  reboot_flag="poweroff"
fi

# system specific configuration
if [ "${syscfg}" == "rhenium" ] ; then
  partition_all_drives

  # start arrays and wipe any filesystems we suddenly get ;)
  efi_sp_arr=( ${efi_sp_dev} )
  boot_arr=( ${boot_dev} )
  sys_arr=( ${sys_dev} )
  mdadm --create /dev/md/efi -Nefi -l1 --homehost=${syscfg} -n ${#efi_sp_arr[@]} --metadata=1.0 ${efi_sp_dev}
  wipefs -a /dev/md/efi
  mdadm --create /dev/md/boot -Nboot -l1 --homehost=${syscfg} -n ${#boot_arr[@]} --metadata=1.0 ${boot_dev}
  wipefs -a /dev/md/boot
  mdadm --create /dev/md/system -Nsystem -l1 --homehost=${syscfg} -n ${#sys_arr[@]} --metadata=1.1 ${sys_dev}
  wipefs -a /dev/md/system

  # format the ESP
  mkfs.vfat -F32 /dev/md/efi

  # tell kickstart we already have raid volumes, and build lvm from there.
  {
    # partitions
    for part in ${biosboot_dev} ; do
      p=$(basename "${part}")
      printf 'part biosboot --fstype=biosboot --onpart=%s\n' "${p}"
    done
    for part in ${efi_sp_dev} ; do
      p=$(basename "${part}")
      i=${p:2:1}
      printf 'part raid.0%s --fstype="mdmember" --noformat --onpart=%s\n' "${i}" "${p}"
    done
    for part in ${boot_dev} ; do
      p=$(basename "${part}")
      i=${p:2:1}
      printf 'part raid.1%s --fstype="mdmember" --noformat --onpart=%s\n' "${i}" "${p}"
    done
    for part in ${sys_dev} ; do
      p=$(basename "${part}")
      i=${p:2:1}
      printf 'part raid.2%s --fstype="mdmember" --noformat --onpart=%s\n' "${i}" "${p}"
    done

    # RAIDs
    printf 'raid pv.0 --device=system --fstype="lvmpv" --level=1 --useexisting\n'
    printf 'raid /boot --device=boot --fstype="ext2" --useexisting --label="/boot"\n'
    printf 'raid /boot/efi --device=efi --fstype="efi" --fsoptions="umask=0077,shortname=winnt" --noformat --useexisting --label="EFISP"\n'

    # LVM
    printf 'volgroup rhenium pv.0\n'
    printf 'logvol / --vgname=rhenium --fstype=ext4 --name=root --size=18432\n'
    printf 'logvol swap --vgname=rhenium --name=swap --size=512\n'

    # LVM thinpool
    printf 'logvol none --vgname=rhenium --thinpool --name=thinpool --size=18432 --grow\n'
    printf 'logvol /var/lib/libvirt/images --vgname=rhenium --thin --poolname=thinpool --fsoptions="defaults,discard" --fstype=ext4 --name=libvirt-images --size=18432\n'

    printf 'bootloader --append=" crashkernel auto" --location=mbr\n'
  } > /tmp/part-include

fi

if [[ " radon mercury nickel qemu-generic " =~ " ${syscfg} " ]] ; then
  partition_all_drives

  {
    for part in ${biosboot_dev} ; do
      p=$(basename "${part}")
      printf 'part biosboot --fstype=biosboot --onpart=%s\n' "${p}"
    done
    for part in ${efi_sp_dev} ; do
      p=$(basename "${part}")
      printf 'part /boot/efi --fstype="efi" --onpart=%s\n' "${p}"
    done
    for part in ${boot_dev} ; do
      p=$(basename "${part}")
      printf 'part /boot --fstype="ext2" --onpart=%s\n' "${p}"
    done
    for part in ${sys_dev} ; do
      p=$(basename "${part}")
      printf 'part pv.0 --fstype="lvmpv" --onpart=%s\n' "${p}"
    done
    # LVM
    printf 'volgroup centos_system pv.0\n'
    printf 'logvol / --vgname=centos_system --fstype=ext4 --name=root --size=18432\n'
    printf 'logvol swap --vgname=centos_system --name=swap --size=512\n'

    printf 'bootloader --append=" crashkernel auto" --location=mbr\n'
  } > /tmp/part-include
fi

# hang the hostname up
printf 'network --hostname="%s"\n' "${inst_fqdn}" >> /tmp/net-include

# we always create reboot-flag
printf '%s\n' "${reboot_flag}" > /tmp/reboot-flag

# we always create post-vars.
touch /tmp/post-vars

# write out the syscfg for %post
if [ ! -z "${syscfg}" ] ; then
  printf 'syscfg="%s"\n' "${syscfg}" >> /tmp/post-vars
fi

%end

%post --nochroot --log=/mnt/sysimage/root/post.log
# be a chatterbox here
set -x

# on with nullglub
shopt -s nullglob

# pick up env vars from %pre
. /tmp/post-vars

# install grub cross-bootably
if [ -d /sys/firmware/efi/efivars ] ; then
  # install i386 grub in efi
  chroot /mnt/sysimage grub2-install --target=i386-pc /dev/${disk}
  chroot /mnt/sysimage grub2-mkconfig | sed 's@linuxefi@linux16@g' | sed 's@initrdefi@initrd16@g' > /mnt/sysimage/boot/grub2/grub.cfg
else
  # install efi grub in i386
  chroot /mnt/sysimage grub2-mkconfig | sed 's@linux16@linuxefi@g' | sed 's@initrd16@initrdefi@g' > /mnt/sysimage/boot/efi/EFI/centos/grub.cfg
fi

# rewire the repo files :)
{
  for r in os updates extras ; do
    printf '[%s]\nbaseurl=%s/$releasever/%s/$basearch/\ngpgcheck=1\n' "${r}" "http://wcs.bbxn.us/centos" "${r}"
  done
} > /mnt/sysimage/etc/yum.repos.d/CentOS-Base.repo

printf '[%s]\nbaseurl=%s/$releasever/$basearch/\ngpgcheck=1\n' "epel" "http://wcs.bbxn.us/epel" > /mnt/sysimage/etc/yum.repos.d/epel.repo

for f in /mnt/sysimage/etc/pki/rpm-gpg/* ; do
  k=${f##*/}
  chroot /mnt/sysimage rpm --import "/etc/pki/rpm-gpg/${k}"
done

# this particular vlan table is global since all HVs use it.
vlan[4]=netmgmt
vlan[5]=standard
vlan[7]=guest
vlan[66]=transit
vlan[70]=restricted
vlan[100]=virthost
vlan[303]=dmz
vlan[606]=chaos
vlan[999]=iot
vlan[2000]=pln
vlan[2002]=wext

# configure the network using systemd-networkd here.
mkdir -p /mnt/sysimage/etc/systemd/network/

# shoot NetworkManager in the face
ln -s /dev/null /mnt/sysimage/etc/systemd/system/NetworkManager.service
ln -s /dev/null /mnt/sysimage/etc/systemd/system/NetworkManager-wait-online.service
rm -f /mnt/sysimage/etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.
rm -f /mnt/sysimage/etc/systemd/system/multi-user.target.wants/NetworkManager.service.
rm -f /mnt/sysimage/etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.
ln -s /usr/lib/systemd/system/systemd-networkd-wait-online.service /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service

# disable ipv6 for most things
printf 'net.ipv6.conf.default.disable_ipv6 = 1\nnet.ipv6.conf.lo.disable_ipv6 = 0\n' > /mnt/sysimage/etc/sysctl.d/40-ipv6.conf

# create vmm
printf '[NetDev]\nName=vmm\nKind=bridge\n' > "/mnt/sysimage/etc/systemd/network/vmm.netdev"
printf '[Match]\nName=vmm\n[Network]\nLinkLocalAddressing=no\nLLMNR=false\nIPv6AcceptRA=no\nAddress=192.168.128.129/25\n' > "/mnt/sysimage/etc/systemd/network/vmm.network"

# update firewalld for vmm
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --new-zone vmm
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --zone vmm --add-interface vmm
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --direct --add-rule eb filter FORWARD 0 --logical-in vmm -j DROP
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --direct --add-rule eb filter FORWARD 1 --logical-out vmm -j DROP
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --zone vmm --add-service dhcp
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --zone vmm --add-service ntp
chroot /mnt/sysimage /usr/bin/firewall-offline-cmd --zone vmm --add-port 3493/tcp

# configure dnsmasq
{
  printf 'port=0\ninterface=vmm\nbind-interfaces\nno-hosts\n'
  printf 'dhcp-range=192.168.128.130,192.168.128.254,30m\n'
  printf 'dhcp-option=3\ndhcp-option=6\ndhcp-option=12\ndhcp-option=42,0.0.0.0\n'
  printf 'dhcp-option=vendor:BBXN,1,0.0.0.0\n'
  printf 'dhcp-authoritative\n'
} > /mnt/sysimage/etc/dnsmasq.conf
ln -s /usr/lib/systemd/system/dnsmasq.service /mnt/sysimage/etc/systemd/system/multi-user.target.wants/dnsmasq.service
mkdir -p /mnt/sysimage/etc/systemd/system/dnsmasq.service.d
printf '[Service]\nRestartSec=1s\nRestart=on-failure\n' > /mnt/sysimage/etc/systemd/system/dnsmasq.service.d/local.conf

if [[ " rhenium " =~ " ${syscfg} " ]] ; then
  topcard='enp6s0f1'
fi

if [[ " radon mercury " =~ " ${syscfg} " ]] ; then
  topcard='enp3s0'
fi

if [[ " nickel " =~ " ${syscfg} " ]] ; then
  topcard='enp1s0f0'
fi

case "${syscfg}" in
  rhenium)
    fallback_ipv4=172.16.143.150/25
    ;;
  radon)
    fallback_ipv4=172.16.143.151/25
    ;;
  mercury)
    fallback_ipv4=172.16.143.152/25
    ;;
  nickel)
    fallback_ipv4=172.16.143.153/25
    ;;
esac

if [ ! -z "${topcard}" ] ; then
  printf '[Match]\nName=%s\n[Network]\nLinkLocalAddressing=no\nLLMNR=false\nIPv6AcceptRA=no\n' "${topcard}" > "/mnt/sysimage/etc/systemd/network/${topcard}.network"

  # create bridges,vlans
  for vid in "${!vlan[@]}" ; do
    printf '[NetDev]\nName=%s\nKind=bridge\n' "${vlan[$vid]}" > "/mnt/sysimage/etc/systemd/network/${vlan[$vid]}.netdev"
    printf '[Match]\nName=%s\n[Network]\nLinkLocalAddressing=no\nLLMNR=false\nIPv6AcceptRA=no\n' "${vlan[$vid]}" > "/mnt/sysimage/etc/systemd/network/${vlan[$vid]}.network"
    printf '[NetDev]\nName=vlan-%s\nKind=vlan\n[VLAN]\nId=%s\n' "${vlan[$vid]}" "${vid}" > "/mnt/sysimage/etc/systemd/network/vlan-${vlan[$vid]}.netdev"
    printf '[Match]\nName=vlan-%s\n[Network]\nBridge=%s\nLinkLocalAddressing=no\nLLMNR=false\nIPv6AcceptRA=no\n' "${vlan[$vid]}" "${vlan[$vid]}" > "/mnt/sysimage/etc/systemd/network/vlan-${vlan[$vid]}.network"
    # associate vlans to topdev
    printf 'VLAN=vlan-%s\n' "${vlan[$vid]}" >> "/mnt/sysimage/etc/systemd/network/${topcard}.network"
  done

  # configure virthost to use dhclient, with a fallback managed via systemd...
  {
    printf '[Unit]\nDescription=dhclient on %%I\nWants=network.target\nBefore=network.target\nOnFailure=dhclient-fallback@%%i.service\n'
    printf '[Service]\nEnvironment=PATH_DHCLIENT_PID=/var/run/dhclient-%%i.pid\nEnvironment=PATH_DHCLIENT_DB=/var/lib/dhclient/dhclient-%%i.leases\n'
    printf 'ExecStart=/sbin/dhclient -4 -d -1 %%i\nRestart=on-success\n'
  } > "/mnt/sysimage/etc/systemd/system/dhclient@.service"
  printf '[Unit]\nDescription=dhclient watchdog for %%I\n[Timer]\nOnBootSec=5min\nOnUnitActiveSec=30min\nUnit=dhclient@%%i.service\n[Install]\nWantedBy=timers.target\n' > "/mnt/sysimage/etc/systemd/system/dhclient@.timer"

  printf '[Unit]\nDescription=dhclient fallback for %%I\n[Service]\nType=oneshot\nExecStart=/usr/local/libexec/dhclient-fallback.sh %%i\n' > "/mnt/sysimage/etc/systemd/system/dhclient-fallback@.service"
  {
    printf '#!/usr/bin/env bash\nif [ -f "/usr/local/etc/dhclient-fallback/${1}.conf" ] ; then\n'
    printf ' source "/usr/local/etc/dhclient-fallback/${1}.conf"\nelse\n exit 0\nfi\n'
    printf 'ip addr add "${IPADDR0}" dev "${1}"\n'
    printf 'if [ ! -z "${GATEWAY}" ]; then\n ip route add default via "${GATEWAY}"\nfi\n'
  } > "/mnt/sysimage/usr/local/libexec/dhclient-fallback.sh"
  chmod +x /mnt/sysimage/usr/local/libexec/dhclient-fallback.sh

  mkdir /mnt/sysimage/etc/systemd/system/timers.target.wants
  ln -s /etc/systemd/system/dhclient@.timer /mnt/sysimage/etc/systemd/system/timers.target.wants/dhclient@virthost.timer

  # configure last-ditch DNS here too.
  printf 'nameserver 8.8.8.8\n' > /mnt/sysimage/etc/resolv.conf

  # if we have a fallback ipv4 for virthost, here you go
  if [ ! -z "${fallback_ipv4}" ] ; then
     mkdir -p /mnt/sysimage/usr/local/etc/dhclient-fallback
    printf 'IPADDR0=%s\nGATEWAY=172.16.143.129\n' "${fallback_ipv4}" > "/mnt/sysimage/usr/local/etc/dhclient-fallback/virthost.conf"
  fi

  # while we're here, install udev trickery to autobridge all the other ethernet adapters
  mkdir -p /mnt/sysimage/etc/udev/autobr-lmac
  {
    printf 'SUBSYSTEM!="net", GOTO="autobr_end"\n'
    printf 'ACTION!="add", GOTO="autobr_end"\n'
    printf 'ENV{INTERFACE}=="lo", GOTO="autobr_end"\n'
    printf 'ENV{DEVTYPE}=="bridge", GOTO="autobr_end"\n'
    printf 'ENV{DEVTYPE}=="vlan", GOTO="autobr_end"\n'
    printf 'ENV{DEVTYPE}=="wlan", GOTO="autobr_end"\n'
    printf 'ENV{ID_NET_DRIVER}=="tun", GOTO="autobr_end"\n'
    printf 'PROGRAM="/usr/bin/test -e /etc/systemd/network/%%k.network", GOTO="autobr_end"\n'
    printf 'RUN+="/usr/sbin/ip link set dev %%k down"\n'
    printf 'RUN+="/etc/udev/autobr-lmac.sh"\n'
    printf 'RUN+="/usr/sbin/ip link add br-%%k type bridge"\n'
    printf 'RUN+="/usr/sbin/ip link set dev %%k master br-%%k"\n'
    printf 'RUN+="/usr/sbin/ip link set %%k up"\n'
    printf 'RUN+="/usr/sbin/ip link set br-%%k up"\n'
    printf 'ENV{NM_UNMANAGED}="1"\n'
    printf 'LABEL="autobr_end"\n'
  } > /mnt/sysimage/etc/udev/rules.d/81-autobridge.rules

  {
    printf '5A'
    dd bs=1 count=2 if=/dev/random 2>/dev/null | hexdump -v -e '/1 ":%02X"'
  } > /mnt/sysimage/etc/udev/autobr-lmac/prefix

  {
    printf '#!/bin/bash\n'
    printf 'cmac=${ID_NET_NAME_MAC: -12}\n'
    printf 'if [ ! -f "/etc/udev/autobr-lmac/lmac.${cmac}" ] ; then\n'
    printf '{\n cat /etc/udev/autobr-lmac/prefix\n dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '"'"'/1 ":%%02X"'"'"'\n} > "/etc/udev/autobr-lmac/lmac.${cmac}"\n'
    printf 'fi\n'
    printf 'read lmac < "/etc/udev/autobr-lmac/lmac.${cmac}"\n'
    printf 'if [ ${#lmac} -eq 17 ] ; then\n'
    printf ' /sbin/ip link set dev "${INTERFACE}" address "${lmac}"\n'
    printf 'fi\n'
  } > /mnt/sysimage/etc/udev/autobr-lmac.sh

  chmod +x /mnt/sysimage/etc/udev/autobr-lmac.sh
fi

  # hand some usb devices over for direct passthrough by unbinding them
  {
    printf 'SUBSYSTEM=="usb",ATTRS{idVendor}=="0b05",ATTRS{idProduct}=="1784",RUN="/bin/sh -c echo -n $kernel > /sys/bus/drivers/$driver/unbind"\n'
  } > /mnt/sysimage/etc/udev/rules.d/81-autopass.rules

  # configure chronyd
  {
    printf 'server ntp.bblug.org\nserver vision.arlen.io\nserver time-b.pts0.net\n'
    printf 'allow 192.168.128.128/25\nbindaddress 192.168.128.129\n'
  } > /mnt/sysimage/etc/chrony.conf


%end
